= LockJar

LockJar manages Java Jars for Ruby. Powered by {Naether}[https://github.com/mguymon/naether] to create a frankenstein of 
Bundler and Maven. A Jarfile ({example}[https://github.com/mguymon/lock_jar/blob/master/spec/Jarfile]) is used to 
generate a Jarfile.lock that contains all the resolved jar dependencies for scopes runtime, compile, and test. 
The Jarfile.lock can be used to populate the classpath.

https://github.com/mguymon/lock_jar

== Install

gem install lock_jar

== Usage

=== Using a Jarfile

==== Jarfile
A Jarfile is a simple file using a Ruby DSL for defining a project's Jar dependencies using the following 
methods:

* local: Set the local Maven repository
* repository: Add url of additional Maven repository to use.
* jar: Add Jar dependency in artifact notation
* pom: Add local path to a Maven pom
* scope: set the scope for a jar or pom declaration. Default scope is compile

Example Jarfile

  repository 'http://repository.jboss.org/nexus/content/groups/public-jboss'
  	
  // Default scope is compile
  jar "org.apache.mina:mina-core:2.0.4"
  
  scope 'runtime' do
    jar 'org.apache.tomcat:servlet-api:jar:6.0.35'
  end
  
  scope 'test' do
    jar 'junit:junit:jar:4.10'
  end
  
	
==== Resolving dependencies

When the Jarfile is locked, the transitive dependencies for the Jars and Pom are resolved and saved to the Jarfile.lock file.

Example of locking a Jarfile to a Jarfile.lock

    LockJar.lock
  
 
==== Jarfile.lock

The Jarfile.lock generated is a YAML file containing the scoped dependencies, their resolved dependencies, and
the additional Maven repositories.

The Jarfile.lock

  --- 
  repositories: 
    - http://repository.jboss.org/nexus/content/groups/public-jboss
  scopes: 
    compile: 
      dependencies: 
        - org.apache.mina:mina-core:2.0.4
      resolved_dependencies: 
        - org.apache.mina:mina-core:jar:2.0.4
        - org.slf4j:slf4j-api:jar:1.6.1
        - com.slackworks:modelcitizen:jar:0.2.2
        - commons-lang:commons-lang:jar:2.6
        - commons-beanutils:commons-beanutils:jar:1.8.3
        - commons-logging:commons-logging:jar:1.1.1
        - ch.qos.logback:logback-classic:jar:0.9.24
        - ch.qos.logback:logback-core:jar:0.9.24
        - com.metapossum:metapossum-scanner:jar:1.0
        - commons-io:commons-io:jar:1.4
        - junit:junit:jar:4.7
    runtime: 
      dependencies: 
        - org.apache.tomcat:servlet-api:jar:6.0.35
      resolved_dependencies: 
        - org.apache.tomcat:servlet-api:jar:6.0.35
    test: 
      dependencies: 
        - junit:junit:jar:4.10
      resolved_dependencies: 
        - junit:junit:jar:4.10
        - org.hamcrest:hamcrest-core:jar:1.1
  
  
==== Accessing Jars

Once a Jarfile.lock is generated, you can list all resolved jars by
  
  jars = LockJar.list
  
or directly load all Jars into the classpath
  
  jars = LockJar.load  

Do not forget, if you change your Jarfile, you have to re-generate the Jarfile.lock.
  
=== Skipping the Jarfile

You can skip the Jarfile and Jarfile.lock to directly load dependencies by passing a block to LockJar.load
    
    LockJar.load do
      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'
    end

Since you skipped the locking part, mostly likely you will need to resolve the dependences in the block, just pass the 
:resolve => true option to enable dependency resolution.

    LockJar.load( :resolve => true ) do
      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'
    end

=== Bundler Integration

LockJar integrates with {Bundler}[https://github.com/carlhuda/bundler/] by {modifying}[https://github.com/mguymon/lock_jar/blob/master/lib/lock_jar/bundler.rb] the Bundler
DSL to include LockJar's DSL, generating a Jarfile.lock when Bundler locks, and populating the classpath
when Bundler requires.

==== Example

The following Gemfile with LockJar

  # This is what modifies Bundler to trigger LockJar
  require 'lock_jar/bundler' 
  
  gem "naether"

  group :development do
    gem "rspec", "~> 2.9.0"
  end
        
  # lockjar dsl that is used to generate Jarfile.lock
  lock_jar do
    scope :test do
      jar 'junit:junit:jar:4.10'
    end
    
    pom 'spec/pom.xml', :scope => :compile
  end

Will produce a Gemfile.lock and Jarfile.lock for

  bundle install
  
When Bundler.setup or Bundler.require is called, the jars from the Jarfile.lock are loaded into the classpath.

  require 'rubygems'
  require 'bundler'

  # This is what modifies Bundler to trigger LockJar
  require 'lock_jar/bundler' 

  Bundler.require
  
=== Buildr Integration

LockJar integrates with {Buildr}[http://buildr.apache.org/] using an {Addon}[https://github.com/mguymon/lock_jar/blob/master/lib/lock_jar/buildr.rb].
This allows the Jarfile to be defined directly into a buildfile. A global app LockJar definition can be set and
is inherited to all projects. Each project may have its own LockJar definition. A lock file is generated per project based
on the project name.

A new Buildr task is added to generate the lockfile for all projects

  buildr lock_jar:lock
  
and a task per project to generate the lockfile for a single project

  buildr <app>:<project>:lock_jar:lock

The resolved dependencies are automatically added to the classpath for compiling and testing. Do not forget, if you change the lock_jar
definitions, you have to rerun the lock_jar:lock task.


==== Example

Sample buildfile with LockJar

  require 'lock_jar/buildr'
  
  # app definition, inherited into all projects
  lock_jar do
       repository 'http://repository.jboss.org/nexus/content/groups/public-jboss'

       scope 'test' do
         jar 'junit:junit:jar:4.10'
       end
  end

  define 'app' do

     def 'project1' do
       lock_jar do
         jar  "org.apache.mina:mina-core:2.0.4"
       end
     end

     def 'project2' do
        lock_jar do
          pom 'pom.xml'
        end
     end

  end

Generated the following lock files using lock_jar:lock

* project1.lock - contains junit and mina jars.
* project2.lock - contains junit and pom.xml jars.
  

== License

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with this
work for additional information regarding copyright ownership.  The ASF
licenses this file to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
License for the specific language governing permissions and limitations under
the License.

