{"google":"","tagline":"LockJar manages Java Jars for Ruby","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lock jar","body":"# LockJar\r\n\r\nLockJar manages Java Jars for Ruby. Powered by [Naether](https://github.com/mguymon/naether) to create a frankenstein of Bundler and Maven. A Jarfile ([example](https://github.com/mguymon/lock_jar/blob/master/spec/Jarfile)) is used to generate a Jarfile.lock that contains all the resolved jar dependencies for scopes runtime, compile, and test. The Jarfile.lock can be used to populate the classpath.\r\n\r\nLockJar can be used directly or integrates directly with Bundler and Buildr.\r\n\r\nhttps://github.com/mguymon/lock_jar\r\n\r\n[RDoc](http://rubydoc.info/github/mguymon/lock_jar/master/frames)\r\n\r\n## Install\r\n\r\n    gem install lock_jar\r\n\r\n## Usage\r\n\r\n### Jarfile\r\n\r\nA Jarfile is a simple file using a Ruby DSL for defining a project's dependencies using the following \r\nmethods:\r\n\r\n* **local( path )**: Set the local Maven repository, this were dependencies are downloaded to. \r\n* **repository( url )**: Add additional urlr of remote Maven repository.\r\n* **map( notation, paths )**: Map local compiled class paths to a notation. The map is applied when loading or listing jar. This is useful for local development that overrides an artifact. A single or Array of paths can be set.\r\n* **exclude( excludes )**: Add a artifact:group that will be excluded from resolved dependencies. A single or Array of excludes can be set.\r\n* **jar( notations, opts = {} )**: Add Jar dependency in artifact notation, artifact:group:version as the bare minimum. A single or Array of notations can be passed. Default scope is _compile_, can be specified by setting _opts = { :scope => ['new_scope'] }_\r\n* **pom( pom_path, opts = {} )**: Add a local Maven pom, default is to load dependencies for all scopes. To select the scopes to be loaded from the pom, set the _opts = { :scopes => ['new_scope'] }_\r\n* **scope( scopes )**: Set the scope for nested jar or pom. A single or Array of scopes can be set.\r\n\r\n#### Example Jarfile\r\n\r\n    repository 'http://repository.jboss.org/nexus/content/groups/public-jboss'\r\n  \t\r\n    // Default scope is compile\r\n    jar \"org.apache.mina:mina-core:2.0.4\"\r\n  \r\n    scope 'runtime' do\r\n      jar 'org.apache.tomcat:servlet-api:jar:6.0.35'\r\n    end\r\n  \r\n    scope 'test' do\r\n      jar 'junit:junit:jar:4.10'\r\n    end\r\n  \r\n\t\r\n### Resolving dependencies\r\n\r\n* **LockJar.lock( *args )**: Using a Jarfile, creates a lock file. Depending on the type of arg, a different configuration is set.\r\n  * An arg of a String will set the Jarfile path, e.g. _'/somewhere/Jarfile.different'_. Default jarfile is _'Jarfile'_\r\n  * An arg of a Hash will set the options, e.g. _{ :local_repo => 'path' }_\r\n      * **:download** if true, will download jars to local repo. Defaults to true.\r\n      * **:local_repo** sets the local repo path\r\n      * **:lockfile** sets the Jarfile.lock path. Default lockfile is _Jarfile.lock_.\r\n\r\nWhen the Jarfile is locked, the transitive dependencies are resolved and saved to the Jarfile.lock file.\r\n\r\nExample of locking a Jarfile to a Jarfile.lock\r\n\r\n    LockJar.lock\r\n  \r\n \r\n### Jarfile.lock\r\n\r\nThe _Jarfile.lock_ generated is a YAML file containing the scoped dependencies, their resolved dependencies, and the additional Maven repositories.\r\n\r\n#### The Jarfile.lock\r\n\r\n    --- \r\n    repositories: \r\n      - http://repository.jboss.org/nexus/content/groups/public-jboss\r\n    scopes: \r\n      compile: \r\n        dependencies: \r\n          - org.apache.mina:mina-core:2.0.4\r\n        resolved_dependencies: \r\n          - org.apache.mina:mina-core:jar:2.0.4\r\n          - org.slf4j:slf4j-api:jar:1.6.1\r\n          - com.slackworks:modelcitizen:jar:0.2.2\r\n          - commons-lang:commons-lang:jar:2.6\r\n          - commons-beanutils:commons-beanutils:jar:1.8.3\r\n          - commons-logging:commons-logging:jar:1.1.1\r\n          - ch.qos.logback:logback-classic:jar:0.9.24\r\n          - ch.qos.logback:logback-core:jar:0.9.24\r\n          - com.metapossum:metapossum-scanner:jar:1.0\r\n          - commons-io:commons-io:jar:1.4\r\n          - junit:junit:jar:4.7\r\n      runtime: \r\n        dependencies: \r\n          - org.apache.tomcat:servlet-api:jar:6.0.35\r\n        resolved_dependencies: \r\n          - org.apache.tomcat:servlet-api:jar:6.0.35\r\n      test: \r\n        dependencies: \r\n          - junit:junit:jar:4.10\r\n        resolved_dependencies: \r\n          - junit:junit:jar:4.10\r\n          - org.hamcrest:hamcrest-core:jar:1.1\r\n  \r\n  \r\n### Accessing Jars\r\n\r\n* **LockJar.list(*args)**: Lists all dependencies as notations for scopes from the Jarfile.lock.  Depending on the type of arg, a different configuration is set.  \r\n  * An arg of a String will set the Jarfile.lock path, e.g. _Better.lock_. Default lock file is _Jarfile.lock_.\r\n  * An arg of an Array will set the scopes, e.g. _['compile','test']_. Defaults scopes are _compile_ and _runtime_.\r\n  * An arg of a Hash will set the options, e.g. _{ :local_repo => 'path' }_\r\n      * **:local_repo** sets the local repo path\r\n      * **:local_paths** converts the notations to paths of jars in the local repo\r\n      * **:resolve** to true will make transitive dependences resolve before returning list of jars\r\n  \r\n* **LockJar.load(*args)**: Loads all dependencies to the classpath for scopes from the Jarfile.lock. Defaults scopes are _compile_ and _runtime_. Default lock file is _Jarfile.lock_.\r\n  * An arg of a String will set the Jarfile.lock, e.g. _'Better.lock'_\r\n  * An arg of an Array will set the scopes, e.g. _['compile','test']_\r\n  * An arg of a Hash will set the options, e.g. _{ :local_repo => 'path' }_\r\n     * **:local_repo** sets the local repo path\r\n     * **:resolve** to true will make transitive dependences resolve before loading to classpath \r\n\r\nOnce a _Jarfile.lock_ is generated, you can list all resolved jars by\r\n  \r\n    jars = LockJar.list\r\n  \r\nor directly load all Jars into the classpath\r\n  \r\n    jars = LockJar.load  \r\n\r\nDo not forget, if you change your _Jarfile_, you have to re-generate the _Jarfile.lock_.\r\n  \r\n### Shortcuts\r\n\r\n#### Skipping the Jarfile\r\n\r\nYou can skip the _Jarfile_ and _Jarfile.lock_ to directly play with dependencies by passing a block to _LockJar.lock_, _LockJar.list_, and _LockJar.load_\r\n\r\n#### Lock without a Jarfile\r\n\r\n    LockJar.lock do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\n#### List without a Jarfile.lock\r\n    \r\n    LockJar.list do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\n#### Load without a Jarfile.lock\r\n    \r\n    LockJar.load do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\nSince you skipped the locking part, mostly likely you will need to resolve the dependences in the block, just pass the _:resolve => true_ option to enable dependency resolution (also works for _LockJar.list_).\r\n\r\n    LockJar.load( :resolve => true ) do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\n## Command line\r\n\r\nThere is a simple command line helper. You can lock a _Jarfile_ with the following command\r\n\r\n    lockjar lock\r\n\r\nList jars in a _Jarfile.lock_ with \r\n \r\n    lockjar list\r\n  \r\nDownload all jars in a _Jarfile.lock_ with\r\n\r\n    lockjar install\r\n  \r\n_lockjar_ _--help_ will give you list of all commands and their options.\r\n\r\n## Bundler Integration\r\n\r\nHas been deprecated to https://github.com/mguymon/lock_jar/tree/bundler_support\r\n  \r\n## Buildr Integration\r\n\r\nLockJar integrates with [Buildr](http://buildr.apache.org/) using an [Addon](https://github.com/mguymon/lock_jar/blob/master/lib/lock_jar/buildr.rb). This allows the Jarfile to be defined directly into a _buildfile_. A global LockJar definition can be set and is inherited to all projects. Each project may have its own LockJar definition. A lock file is generated per project based on the project name.\r\n\r\nA new Buildr task is added to generate the lockfile for all projects\r\n\r\n    buildr lock_jar:lock\r\n  \r\nand a task per project to generate the lockfile for a single project\r\n\r\n    buildr <app>:<project>:lock_jar:lock\r\n\r\nIn a project, you can access an Array of notations using the **lock_jars** method, accepts same parameters as [LockJar.list](https://github.com/mguymon/lock_jar#accessing-jars)\r\n\r\n    lock_jars()\r\n\r\n\r\nThe _compile_ scoped dependencies are automatically added to the classpath for compiling. The test scoped dependencies are automatically added to the classpath for tests. Do not forget, if you change the LockJar definitions, you have to rerun the **lock_jar:lock** task.\r\n\r\n\r\n### Example\r\n\r\nSample buildfile with LockJar\r\n\r\n    require 'lock_jar/buildr'\r\n    \r\n    # app definition, inherited into all projects\r\n    lock_jar do\r\n\r\n         scope 'test' do\r\n           jar 'junit:junit:jar:4.10'\r\n         end\r\n    end\r\n\r\n    define 'app' do\r\n\r\n       def 'project1' do\r\n         lock_jar do\r\n           jar  \"org.apache.mina:mina-core:2.0.4\"\r\n         end\r\n       end\r\n\r\n       def 'project2' do\r\n          lock_jar do\r\n            pom 'pom.xml'\r\n          end\r\n       end\r\n\r\n    end\r\n\r\nGenerated the following lock files using **lock_jar:lock**\r\n\r\n* project1.lock - contains _junit_ and _mina_ jars.\r\n* project2.lock - contains _junit_ and _pom.xml_ jars.\r\n  \r\n\r\n## License\r\n\r\nLicensed to the Apache Software Foundation (ASF) under one or more\r\ncontributor license agreements.  See the NOTICE file distributed with this\r\nwork for additional information regarding copyright ownership.  The ASF\r\nlicenses this file to you under the Apache License, Version 2.0 (the\r\n\"License\"); you may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\r\nLicense for the specific language governing permissions and limitations under\r\nthe License.\r\n\r\n"}